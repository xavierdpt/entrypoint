--------------------------------------------------------------------------------
Arithmetic operators
--------------------------------------------------------------------------------
+ addition (prefix and infix)
- subtraction (prefix and infix)
* multiplication
/ division
% remainder
** power
++ (prefix and postfix)
-- (prefix and postfix)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Assignment arithmetic operators
--------------------------------------------------------------------------------
+=
-=
*=
/=
%=
**=
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Relational operators
--------------------------------------------------------------------------------
== equality
!= inequality
< less than
<= less than or equal
> greater than
>= greater than or equal
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Logical operators
--------------------------------------------------------------------------------
&& conjunction
|| disjunction
!  negation
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Bitwise operators
--------------------------------------------------------------------------------
& bitwise "and"
| bitwise "or"
^ bitwise "xor"
~ bitwise negation
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Ternary operator
--------------------------------------------------------------------------------
result = condition ? expression_if_true : expression_if_false
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
null casts to false
--------------------------------------------------------------------------------
def myobject = null
println(myobject ? "My object is not null" : "My object is null")
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Elvis operator
--------------------------------------------------------------------------------
println(user.name ?: "No name")
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Object safe navigation
--------------------------------------------------------------------------------
def name = user?.name
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Direct field access operator
--------------------------------------------------------------------------------
def name = user.@name
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Method pointer operator
returns a groovy.lang.Closure
--------------------------------------------------------------------------------
def fun = "".&toUpperCase                         
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Pattern operator
returns java.util.regex.Pattern
--------------------------------------------------------------------------------
def p = ~/foo/
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Find operator
returns java.util.regex.Matcher
--------------------------------------------------------------------------------
if(text =~ /match/) { ... }
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Match operator
returns a boolean
--------------------------------------------------------------------------------
if(text ==~ /match/) { ... }
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Find vs. Match
For ==~, match must be strict
TODO: understand this
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spread operator
--------------------------------------------------------------------------------
objects*.property
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spread operator is null safe
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spread operator shortcut
--------------------------------------------------------------------------------
objects.property
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
The spread operator can be used on any class which implements the Iterable interface
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Chained invocations of the spread operator produce nested arrays
--------------------------------------------------------------------------------
objects*.subobjects*.property
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
collectNested
--------------------------------------------------------------------------------
cars.collectNested{ it.model }
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spread method arguments
--------------------------------------------------------------------------------
foo(*args)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spread list elements
--------------------------------------------------------------------------------
def list = [1,2,3,*items,6]            
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spread map elements
--------------------------------------------------------------------------------
def map = [a:1, b:2, *:myothermap]            
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Range
--------------------------------------------------------------------------------
def myrange = 0..5
def myotherrange = 0..<5
myrange.collect()
myrange.size()
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Range can be created for any objects that implements Comparable and
has a next() and a previous() method
--------------------------------------------------------------------------------
def mycharrange = 'a'..'d'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Spaceship (compareTo)
--------------------------------------------------------------------------------
1 <=> 2
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Subscript
--------------------------------------------------------------------------------
mylist[x]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Membership operator
--------------------------------------------------------------------------------
5 in [1,2,3,4,5]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Identity (delegates to equals())
--------------------------------------------------------------------------------
a == b
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Reference equality
--------------------------------------------------------------------------------
a is b
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Coercion operator
--------------------------------------------------------------------------------
Integer x = 123
String s = x as String
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Diamond operator
--------------------------------------------------------------------------------
List<String> strings = new LinkedList<>()
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Call operator
--------------------------------------------------------------------------------
myobject() // works if myobject has a method named 'call'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Operator overloading
--------------------------------------------------------------------------------
+        a.plus(b)
-        a.minus(b)
*        a.multiply(b)
/        a.div(b)
%        a.mod(b)
**       a.power(b)
|        a.or(b)
&        a.and(b)
^        a.xor(b)
as       a.asType(b)
a()      a.call()
a[b]     a.getAt(b)
a[b] = c a.putAt(b, c)
a in b   b.isCase(a)
<<       a.leftShift(b)
>>       a.rightShift(b)
>>>      a.rightShiftUnsigned(b)
++       a.next()
--       a.previous()
+a       a.positive()
-a       a.negative()
~a       a.bitwiseNegate()
--------------------------------------------------------------------------------
