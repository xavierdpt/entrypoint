
--------------------------------------------------------------------------------
Single line comments
--------------------------------------------------------------------------------
// mycomment
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Multi line comments
--------------------------------------------------------------------------------
/* mycomment */
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Groovydoc comment
--------------------------------------------------------------------------------
/** mycomment */
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Shebang
--------------------------------------------------------------------------------
#!/usr/bin/env groovy
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Keywords:
as assert break case catch class const continue def default do else enum extends false finally for goto if implements import in instanceof interface new null package return super switch this throw throws trait true try while
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Identifiers
- can start with letter, '$', '_' 
- rest can be letter, number, '$', '_'
- allowed letters:
    a-z 
    A-Z
    \u00C0-\u00D6
    \u00D8-\u00F6
    \u00F8-\u00FF
    \u0100-\uFFFE
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Keywords are valid identifiers when following a dot.
--------------------------------------------------------------------------------
println myobject.case
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Any string is a valid identifiers when following a dot ;
All quote types can be used ("...") ("""...""") ('...') ('''...''') (/.../) ($/.../$)
--------------------------------------------------------------------------------
println myobject."any string"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Empty map
--------------------------------------------------------------------------------
def map = [:]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Assigning a value to a key in a map
--------------------------------------------------------------------------------
map.key=value
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation
--------------------------------------------------------------------------------
println "Hello, ${name}"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Single quoted strings
    interpolation: no
    multiline: no
--------------------------------------------------------------------------------
println 'Hello World!'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String concatenation
--------------------------------------------------------------------------------
println 'Hel'+'lo World!'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Triple single quoted strings
    interpolation: no
    multiline: yes
--------------------------------------------------------------------------------
println '''Hello
World!'''
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String#stripIndent()
String#stripMargin()
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Multiline string which start on their own line
--------------------------------------------------------------------------------
println '''
Hello World!
'''
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Strip first newline on multiline string which start on their own line
--------------------------------------------------------------------------------
println '''\
Hello World!
'''
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Escaping the single quote
--------------------------------------------------------------------------------
println 'Hello \'World\'!'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Escaping the escape character
--------------------------------------------------------------------------------
println 'hello\\world'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Special characters
\t tabulation
\b backspace
\n newline 
\r carriage return
\f formfeed
\\ backslash
\' single quote
\" double quote
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Unicode escape sequence
--------------------------------------------------------------------------------
println 'The Euro currency symbol: \u20AC'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Double quoted strings
    interpolation: yes
    multiline: no
--------------------------------------------------------------------------------
println "Hello World!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation
--------------------------------------------------------------------------------
def who = "World"
println "Hello ${who}!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation
--------------------------------------------------------------------------------
def who = "World"
println "Hello ${who}!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation with expressions
--------------------------------------------------------------------------------
println "Hello ${2+3}!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation with statements
--------------------------------------------------------------------------------
println "Hello ${def i=0;i=i+1;i}!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Inline map definition
--------------------------------------------------------------------------------
def map = [key1:'value1', key2:'value2']
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation without braces
--------------------------------------------------------------------------------
def map = [key:'value']
println "Hello $map.key!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Prevent interpolation : escape the '$'
--------------------------------------------------------------------------------
println "Hello \${who}!"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation with no-arg closures
--------------------------------------------------------------------------------
def greeting = "Hello ${-> who}!"
def who = "World"
println greeting
who = "user"
println greeting
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String interpolation with 1-arg closures
--------------------------------------------------------------------------------
def greeting = "Hello ${w -> w << "World"}!"
println greeting
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
The type of string with interpolation is actually GString.
When a GString is passed to a function which expects a string, it is
automatically converted to a String.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
GString have their own hashcodes
Using GString has key to a map should be avoided.
--------------------------------------------------------------------------------
def key = "a"
def m = ["${key}": "letter ${key}"]     
assert m["a"] == null  
--------------------------------------------------------------------------------
The map is created with an initial pair whose key is a GString.
When we try to fetch the value with a String key, we will not find it,
as Strings and GString have different hashCode values.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Triple-double-quoted string
--------------------------------------------------------------------------------
def name = 'Groovy'
def template = """
    Dear Mr ${name},

    You're the winner of the lottery!

    Yours sincerly,

    Dave
"""
--------------------------------------------------------------------------------
Question: is the indentation removed ?
What about:
--------------------------------------------------------------------------------
    def name = 'Groovy'
    def template = """
        Dear Mr ${name},
    
        You're the winner of the lottery!
    
        Yours sincerly,
    
        Dave
    """
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Slashy strings
- multiline: yes
- interpolation: yes
- escape: only '/' => '\/'
If x is not '/', '\x' => '\x'
A slashy string cannot end with a backslash.
Empty strings cannot be defined with slashy strings.
--------------------------------------------------------------------------------
println /Temporary folder is in \/tmp/
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Dollar slashy string
- Escaping character is '$'
- Use '$' to escape '$' and '/"
- Escaping is optional in most cases, but is necessary to prevent string interpolation or parsing of a closing tag.
--------------------------------------------------------------------------------
println $/Hello World!/$
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
String summary
- Single-quoted
- Triple-single-quoted
  - multiline
- Double-quoted
  - interpolation
- Triple-double-quoted
  - interpolation
  - multiline
- Slashy
  - interpolation
  - multiline
- Dollar slashy
  - interpolation
  - multiline
  - escape with '$'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Characters
--------------------------------------------------------------------------------
char c1 = 'A' 
def c2 = 'B' as char 
def c3 = (char)'C' 
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Numbers
--------------------------------------------------------------------------------
byte  mybyte = 1
char  mychar = 1
short myshort = 1
int   myint = 1
long  mylong = 1
BigInteger myBigInteger =  1
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Untyped numbers get a type suitable for their size
--------------------------------------------------------------------------------
def a = 1 // Integer
def e = 9223372036854775808 // BigInteger
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Other bases
--------------------------------------------------------------------------------
println 0b10101111 // binary
println 077 // octal
println 0x77 // hexadecimal
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Floats
--------------------------------------------------------------------------------
float myfloat = 1.0
double mydouble = 1.0
BigDecimal myBigDecimal =  1.0
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Floats with scientific notation
--------------------------------------------------------------------------------
println 1e3
println 1e+3
println 1e-3
println 1E3
println 1E+3
println 1E-3
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Implicit for all floats is BigDecimal
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Underscores can be used in number to group digits
--------------------------------------------------------------------------------
println 3_000
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Number suffixes
--------------------------------------------------------------------------------
println 1G // BigInteger
println 1L // long
println 1I // integer
println 1.0G // BigDecimal
println 1.0D // double
println 1.0F // float
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Mixing math operations with different types
+ special cases for division and power operators
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
- Division operator                                                            -
-   if either operand is a float or double, then result is a double            -
-   otherwise, result is a BigDecimal                                          -
-                                                                              -
- if the division is exact,                                                    -
-     then BigDecimal division is performed with the divide() method           -
- otherwise                                                                    -
-     BigDecimal division is performed using a MathContext with                -
-         a precision of the maximum of the two operands' precision            -
-             plus an extra precision of 10                                    -
-         a scale of the maximum of 10 and the maximum of the operands' scale  -
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Power operator with decimal exponent
--------------------------------------------------------------------------------
if the result can be represented as an Integer, then return an Integer
if the result can be represented as a Long, then return a Long
otherwise return a Double
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Power operator with stricly negative integral exponent
--------------------------------------------------------------------------------
return an Integer, Long or Double if the result value fits in that type
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Power operator with positivie or zero exponent
--------------------------------------------------------------------------------
if the base is a BigDecimal, then return a BigDecimal result value
if the base is a BigInteger, then return a BigInteger result value
if the base is an Integer, then return an Integer if the result value fits in it, otherwise a BigInteger
if the base is a Long, then return a Long if the result value fits in it, otherwise a BigInteger
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Booleans
--------------------------------------------------------------------------------
def myboolean = true
boolean myotherboolean = false
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Lists
- interface: java.util.List
- concret type: java.util.ArrayList
--------------------------------------------------------------------------------
def myemptylist = []
def mynonemptylist = [1, "a", true]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
List with different concrete type
--------------------------------------------------------------------------------
def mylist = [] as LinkedList
LinkedList myotherlist = []
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Accessing elements of a list
--------------------------------------------------------------------------------
pinntln mylist[0] // get
mylist[1] = "x" // set
println mylist[-1] // access from the end
mylist[1,2,7] // extract multiple elements in a new list
mylist[2..7] // extract a range in a new list
mylist << "newitem" // append to the list
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Arrays
--------------------------------------------------------------------------------
String[] myarray = ["hello", "world"]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Size of a list or array
--------------------------------------------------------------------------------
println myarray.size()
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Create a multidimensional array
--------------------------------------------------------------------------------
def mymatrix = new Integer[3][3]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Map
- default concrete type: LinkedHashMap
--------------------------------------------------------------------------------
def mymap = [:] // emptymap
mymap.color = "blue" // set
println mymap.color // get
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Map subscript notation
--------------------------------------------------------------------------------
println mymap['mykey']
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Map property notation
--------------------------------------------------------------------------------
println mymap.mykey
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Check that map contains key
--------------------------------------------------------------------------------
println mymap.containsKey(mykey)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Inline map with value of a variable as key
--------------------------------------------------------------------------------
def mymap = [(myvariable): "myvalue"]
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Question: I have a two strings, and I want to construct a key with these
two strings, which of the following should I use ?
--------------------------------------------------------------------------------
def protocol="http"
def ip="127.0.0.1"

def attempt1 = [(protocol+"://"+ip): "secured"]
  // I guess this works but is ugly

def attempt2 = ["${protocol}://${ip}": "secured"]
  // I guess this is not right, because the key is a GString, not a string

def attempt3 = [("${protocol}://${ip}"): "secured"]
  // I guess this is right, because the GString is evaluated into a string
--------------------------------------------------------------------------------
