#!/usr/bin/bash

set -e
. ~/inside/interaction.bsh

if false ; then
message "This script is about the OpenSSL 'x509' command wich is about x509 certificates."

message "Here's some documentation about this command."
run "openssl x509 -help"

message "Let's first generate a private key, the corresponding public key and a certificate request."
message "See the examples about the respective commands for more information."
run "openssl genrsa -out private_key.pem"
run "cat private_key.pem"
run "openssl rsa -in private_key.pem -pubout -out public_key.pem"
run "cat public_key.pem"
run "openssl req -new -key private_key.pem -out certificate_request.pem -batch -subj '/C=XX/ST=mystate/L=mylocality/O=myorganization/OU=myorganizationunit/CN=mycommonname/emailAddress=myemail/'"
run "cat certificate_request.pem"

message "Now we can create a certificate from the certificate request, which we will with a new private key."
run "openssl genrsa -out other_private_key.pem"
run "openssl x509 -req -in certificate_request.pem -signkey other_private_key.pem -out certificate.pem"

message "Let's inspect this certificate"
run "openssl x509 -in certificate.pem -subject -nocert"
run "openssl x509 -in certificate.pem -issuer -nocert"
run "openssl x509 -in certificate.pem -email -nocert"
run "openssl x509 -in certificate.pem -startdate -nocert"
run "openssl x509 -in certificate.pem -enddate -nocert"
run "openssl x509 -in certificate.pem -purpose -nocert"
run "openssl x509 -in certificate.pem -dates -nocert"
run "openssl x509 -in certificate.pem -modulus -nocert"
run "openssl x509 -in certificate.pem -subject_hash -nocert"
run "openssl x509 -in certificate.pem -issuer_hash -nocert"
run "openssl x509 -in certificate.pem -pubkey -nocert"
run "openssl x509 -in certificate.pem -fingerprint -nocert"
run "openssl x509 -in certificate.pem -alias -nocert"
run "openssl x509 -in certificate.pem -ocspid -nocert"
run "openssl x509 -in certificate.pem -ocsp_uri -nocert"
run "openssl x509 -in certificate.pem -serial -nocert"
run "openssl x509 -in certificate.pem -text -nocert"

message "Here's how to set the alias."
run "openssl x509 -req -in certificate_request.pem -signkey other_private_key.pem -setalias myalias -out certificate.pem"
run "openssl x509 -in certificate.pem -alias -nocert"
fi

message "Here's how to clear all purposes."
run "openssl x509 -req -in certificate_request.pem -signkey other_private_key.pem -clrtrust -clrext -out certificate.pem"
run "openssl x509 -in certificate.pem -purpose -nocert"


# -help                 Display this summary
# -inform format        Input format - default PEM (one of DER or PEM)
# -in infile            Input file - default stdin
# -outform format       Output format - default PEM (one of DER or PEM)
# -out outfile          Output file - default stdout
# -keyform PEM|DER      Private key format - default PEM
# -passin val           Private key password/pass-phrase source
# -noout                No output, just status
# -nocert               No certificate output
# -trustout             Output a trusted certificate
# -clrtrust             Clear all trusted purposes
# -clrext               Clear all certificate extensions
# -addtrust val         Trust certificate for a given purpose
# -addreject val        Reject certificate for a given purpose
# -days int             How long till expiry of a signed certificate - def 30 days
# -checkend intmax      Check whether the cert expires in the next arg seconds
#                       Exit 1 if so, 0 if not
# -signkey infile       Self sign cert with arg
# -x509toreq            Output a certification request object
# -req                  Input is a certificate request, sign and output
# -CA infile            Set the CA certificate, must be PEM format
# -CAkey val            The CA key, must be PEM format; if not in CAfile
# -CAcreateserial       Create serial number file if it does not exist
# -CAserial val         Serial file
# -set_serial val       Serial number to use
# -ext val              Print various X509V3 extensions
# -C                    Print out C code forms
# -extfile infile       File with X509V3 extensions to add
# -rand val             Load the file(s) into the random number generator
# -writerand outfile    Write random data to the specified file
# -extensions val       Section from config file to use
# -nameopt val          Various certificate name options
# -certopt val          Various certificate text options
# -checkhost val        Check certificate matches host
# -checkemail val       Check certificate matches email
# -checkip val          Check certificate matches ipaddr
# -CAform PEM|DER       CA format - default PEM
# -CAkeyform format     CA key format - default PEM
# -sigopt val           Signature parameter in n:v form
# -force_pubkey infile  Force the Key to put inside certificate
# -next_serial          Increment current certificate serial number
# -clrreject            Clears all the prohibited or rejected uses of the certificate
# -badsig               Corrupt last byte of certificate signature (for test)
# -*                    Any supported digest
# -subject_hash_old     Print old-style (MD5) issuer hash value
# -issuer_hash_old      Print old-style (MD5) subject hash value
# -engine val           Use engine, possibly a hardware device
# -preserve_dates       preserve existing dates when signing
